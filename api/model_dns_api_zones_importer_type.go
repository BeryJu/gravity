/*
gravity

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.26.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// DnsAPIZonesImporterType the model 'DnsAPIZonesImporterType'
type DnsAPIZonesImporterType string

// List of DnsAPIZonesImporterType
const (
	DNSAPIZONESIMPORTERTYPE_BIND     DnsAPIZonesImporterType = "bind"
	DNSAPIZONESIMPORTERTYPE_OPNSENSE DnsAPIZonesImporterType = "opnsense"
)

// All allowed values of DnsAPIZonesImporterType enum
var AllowedDnsAPIZonesImporterTypeEnumValues = []DnsAPIZonesImporterType{
	"bind",
	"opnsense",
}

func (v *DnsAPIZonesImporterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DnsAPIZonesImporterType(value)
	for _, existing := range AllowedDnsAPIZonesImporterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DnsAPIZonesImporterType", value)
}

// NewDnsAPIZonesImporterTypeFromValue returns a pointer to a valid DnsAPIZonesImporterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDnsAPIZonesImporterTypeFromValue(v string) (*DnsAPIZonesImporterType, error) {
	ev := DnsAPIZonesImporterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DnsAPIZonesImporterType: valid values are %v", v, AllowedDnsAPIZonesImporterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DnsAPIZonesImporterType) IsValid() bool {
	for _, existing := range AllowedDnsAPIZonesImporterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DnsAPIZonesImporterType value
func (v DnsAPIZonesImporterType) Ptr() *DnsAPIZonesImporterType {
	return &v
}

type NullableDnsAPIZonesImporterType struct {
	value *DnsAPIZonesImporterType
	isSet bool
}

func (v NullableDnsAPIZonesImporterType) Get() *DnsAPIZonesImporterType {
	return v.value
}

func (v *NullableDnsAPIZonesImporterType) Set(val *DnsAPIZonesImporterType) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsAPIZonesImporterType) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsAPIZonesImporterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsAPIZonesImporterType(val *DnsAPIZonesImporterType) *NullableDnsAPIZonesImporterType {
	return &NullableDnsAPIZonesImporterType{value: val, isSet: true}
}

func (v NullableDnsAPIZonesImporterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsAPIZonesImporterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
