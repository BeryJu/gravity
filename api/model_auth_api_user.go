/*
gravity

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 99.99.99
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AuthAPIUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthAPIUser{}

// AuthAPIUser struct for AuthAPIUser
type AuthAPIUser struct {
	Permissions []AuthPermission `json:"permissions"`
	Username    string           `json:"username"`
}

type _AuthAPIUser AuthAPIUser

// NewAuthAPIUser instantiates a new AuthAPIUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthAPIUser(permissions []AuthPermission, username string) *AuthAPIUser {
	this := AuthAPIUser{}
	this.Permissions = permissions
	this.Username = username
	return &this
}

// NewAuthAPIUserWithDefaults instantiates a new AuthAPIUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthAPIUserWithDefaults() *AuthAPIUser {
	this := AuthAPIUser{}
	return &this
}

// GetPermissions returns the Permissions field value
// If the value is explicit nil, the zero value for []AuthPermission will be returned
func (o *AuthAPIUser) GetPermissions() []AuthPermission {
	if o == nil {
		var ret []AuthPermission
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthAPIUser) GetPermissionsOk() ([]AuthPermission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *AuthAPIUser) SetPermissions(v []AuthPermission) {
	o.Permissions = v
}

// GetUsername returns the Username field value
func (o *AuthAPIUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AuthAPIUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AuthAPIUser) SetUsername(v string) {
	o.Username = v
}

func (o AuthAPIUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthAPIUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *AuthAPIUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permissions",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthAPIUser := _AuthAPIUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthAPIUser)

	if err != nil {
		return err
	}

	*o = AuthAPIUser(varAuthAPIUser)

	return err
}

type NullableAuthAPIUser struct {
	value *AuthAPIUser
	isSet bool
}

func (v NullableAuthAPIUser) Get() *AuthAPIUser {
	return v.value
}

func (v *NullableAuthAPIUser) Set(val *AuthAPIUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthAPIUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthAPIUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthAPIUser(val *AuthAPIUser) *NullableAuthAPIUser {
	return &NullableAuthAPIUser{value: val, isSet: true}
}

func (v NullableAuthAPIUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthAPIUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
