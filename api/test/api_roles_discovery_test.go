/*
gravity

Testing RolesDiscoveryApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"testing"

	openapiclient "beryju.io/gravity/api"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_api_RolesDiscoveryApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RolesDiscoveryApiService DiscoveryApplyDevice", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.RolesDiscoveryApi.DiscoveryApplyDevice(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RolesDiscoveryApiService DiscoveryDeleteDevices", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.RolesDiscoveryApi.DiscoveryDeleteDevices(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RolesDiscoveryApiService DiscoveryDeleteSubnets", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.RolesDiscoveryApi.DiscoveryDeleteSubnets(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RolesDiscoveryApiService DiscoveryGetDevices", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RolesDiscoveryApi.DiscoveryGetDevices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RolesDiscoveryApiService DiscoveryGetRoleConfig", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RolesDiscoveryApi.DiscoveryGetRoleConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RolesDiscoveryApiService DiscoveryGetSubnets", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RolesDiscoveryApi.DiscoveryGetSubnets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RolesDiscoveryApiService DiscoveryPutRoleConfig", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.RolesDiscoveryApi.DiscoveryPutRoleConfig(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RolesDiscoveryApiService DiscoveryPutSubnets", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.RolesDiscoveryApi.DiscoveryPutSubnets(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RolesDiscoveryApiService DiscoverySubnetStart", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.RolesDiscoveryApi.DiscoverySubnetStart(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
