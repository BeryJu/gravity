/*
gravity

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.26.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the TypesOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesOption{}

// TypesOption struct for TypesOption
type TypesOption struct {
	Def         *string  `json:"def,omitempty"`
	Tag         *int32   `json:"tag,omitempty"`
	TagName     *string  `json:"tagName,omitempty"`
	Value       []string `json:"value,omitempty"`
	Value64     []string `json:"value64,omitempty"`
	ValueHex    []string `json:"valueHex,omitempty"`
	ValueLegacy *string  `json:"valueLegacy,omitempty"`
}

// NewTypesOption instantiates a new TypesOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesOption() *TypesOption {
	this := TypesOption{}
	return &this
}

// NewTypesOptionWithDefaults instantiates a new TypesOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesOptionWithDefaults() *TypesOption {
	this := TypesOption{}
	return &this
}

// GetDef returns the Def field value if set, zero value otherwise.
func (o *TypesOption) GetDef() string {
	if o == nil || IsNil(o.Def) {
		var ret string
		return ret
	}
	return *o.Def
}

// GetDefOk returns a tuple with the Def field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesOption) GetDefOk() (*string, bool) {
	if o == nil || IsNil(o.Def) {
		return nil, false
	}
	return o.Def, true
}

// HasDef returns a boolean if a field has been set.
func (o *TypesOption) HasDef() bool {
	if o != nil && !IsNil(o.Def) {
		return true
	}

	return false
}

// SetDef gets a reference to the given string and assigns it to the Def field.
func (o *TypesOption) SetDef(v string) {
	o.Def = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *TypesOption) GetTag() int32 {
	if o == nil || IsNil(o.Tag) {
		var ret int32
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesOption) GetTagOk() (*int32, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *TypesOption) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given int32 and assigns it to the Tag field.
func (o *TypesOption) SetTag(v int32) {
	o.Tag = &v
}

// GetTagName returns the TagName field value if set, zero value otherwise.
func (o *TypesOption) GetTagName() string {
	if o == nil || IsNil(o.TagName) {
		var ret string
		return ret
	}
	return *o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesOption) GetTagNameOk() (*string, bool) {
	if o == nil || IsNil(o.TagName) {
		return nil, false
	}
	return o.TagName, true
}

// HasTagName returns a boolean if a field has been set.
func (o *TypesOption) HasTagName() bool {
	if o != nil && !IsNil(o.TagName) {
		return true
	}

	return false
}

// SetTagName gets a reference to the given string and assigns it to the TagName field.
func (o *TypesOption) SetTagName(v string) {
	o.TagName = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TypesOption) GetValue() []string {
	if o == nil || IsNil(o.Value) {
		var ret []string
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesOption) GetValueOk() ([]string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TypesOption) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given []string and assigns it to the Value field.
func (o *TypesOption) SetValue(v []string) {
	o.Value = v
}

// GetValue64 returns the Value64 field value if set, zero value otherwise.
func (o *TypesOption) GetValue64() []string {
	if o == nil || IsNil(o.Value64) {
		var ret []string
		return ret
	}
	return o.Value64
}

// GetValue64Ok returns a tuple with the Value64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesOption) GetValue64Ok() ([]string, bool) {
	if o == nil || IsNil(o.Value64) {
		return nil, false
	}
	return o.Value64, true
}

// HasValue64 returns a boolean if a field has been set.
func (o *TypesOption) HasValue64() bool {
	if o != nil && !IsNil(o.Value64) {
		return true
	}

	return false
}

// SetValue64 gets a reference to the given []string and assigns it to the Value64 field.
func (o *TypesOption) SetValue64(v []string) {
	o.Value64 = v
}

// GetValueHex returns the ValueHex field value if set, zero value otherwise.
func (o *TypesOption) GetValueHex() []string {
	if o == nil || IsNil(o.ValueHex) {
		var ret []string
		return ret
	}
	return o.ValueHex
}

// GetValueHexOk returns a tuple with the ValueHex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesOption) GetValueHexOk() ([]string, bool) {
	if o == nil || IsNil(o.ValueHex) {
		return nil, false
	}
	return o.ValueHex, true
}

// HasValueHex returns a boolean if a field has been set.
func (o *TypesOption) HasValueHex() bool {
	if o != nil && !IsNil(o.ValueHex) {
		return true
	}

	return false
}

// SetValueHex gets a reference to the given []string and assigns it to the ValueHex field.
func (o *TypesOption) SetValueHex(v []string) {
	o.ValueHex = v
}

// GetValueLegacy returns the ValueLegacy field value if set, zero value otherwise.
func (o *TypesOption) GetValueLegacy() string {
	if o == nil || IsNil(o.ValueLegacy) {
		var ret string
		return ret
	}
	return *o.ValueLegacy
}

// GetValueLegacyOk returns a tuple with the ValueLegacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesOption) GetValueLegacyOk() (*string, bool) {
	if o == nil || IsNil(o.ValueLegacy) {
		return nil, false
	}
	return o.ValueLegacy, true
}

// HasValueLegacy returns a boolean if a field has been set.
func (o *TypesOption) HasValueLegacy() bool {
	if o != nil && !IsNil(o.ValueLegacy) {
		return true
	}

	return false
}

// SetValueLegacy gets a reference to the given string and assigns it to the ValueLegacy field.
func (o *TypesOption) SetValueLegacy(v string) {
	o.ValueLegacy = &v
}

func (o TypesOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Def) {
		toSerialize["def"] = o.Def
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.TagName) {
		toSerialize["tagName"] = o.TagName
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Value64) {
		toSerialize["value64"] = o.Value64
	}
	if !IsNil(o.ValueHex) {
		toSerialize["valueHex"] = o.ValueHex
	}
	if !IsNil(o.ValueLegacy) {
		toSerialize["valueLegacy"] = o.ValueLegacy
	}
	return toSerialize, nil
}

type NullableTypesOption struct {
	value *TypesOption
	isSet bool
}

func (v NullableTypesOption) Get() *TypesOption {
	return v.value
}

func (v *NullableTypesOption) Set(val *TypesOption) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesOption) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesOption(val *TypesOption) *NullableTypesOption {
	return &NullableTypesOption{value: val, isSet: true}
}

func (v NullableTypesOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
