openapi: 3.0.3
info:
  title: gravity
  version: 0.18.3
servers:
- url: /
paths:
  /api/v1/auth/config:
    get:
      operationId: api.auth_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthAPIConfigOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: API Users
      tags:
      - roles/api
  /api/v1/auth/login:
    post:
      operationId: api.login_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthAPILoginInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthAPILoginOutput'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: API Users
      tags:
      - roles/api
  /api/v1/auth/me:
    get:
      operationId: api.users_me
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthAPIMeOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: API Users
      tags:
      - roles/api
  /api/v1/auth/tokens:
    delete:
      operationId: api.delete_tokens
      parameters:
      - explode: true
        in: query
        name: key
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Tokens
      tags:
      - roles/api
    get:
      operationId: api.get_tokens
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthAPITokensGetOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Tokens
      tags:
      - roles/api
    post:
      operationId: api.put_tokens
      parameters:
      - explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthAPITokensPutOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Tokens
      tags:
      - roles/api
  /api/v1/auth/users:
    delete:
      operationId: api.delete_users
      parameters:
      - explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: API Users
      tags:
      - roles/api
    get:
      operationId: api.get_users
      parameters:
      - description: Optional username of a user to get
        explode: true
        in: query
        name: username
        required: false
        schema:
          description: Optional username of a user to get
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthAPIUsersGetOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: API Users
      tags:
      - roles/api
    post:
      operationId: api.put_users
      parameters:
      - explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthAPIUsersPutInput'
      responses:
        "204":
          description: No Content
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: API Users
      tags:
      - roles/api
  /api/v1/backup/start:
    post:
      operationId: backup.start
      parameters:
      - explode: true
        in: query
        name: wait
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupBackupStatus'
          description: OK
      summary: Backup start
      tags:
      - roles/backup
  /api/v1/backup/status:
    get:
      operationId: backup.status
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupAPIBackupStatusOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Backup status
      tags:
      - roles/backup
  /api/v1/cluster:
    get:
      operationId: cluster.get_cluster_info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceAPIClusterInfoOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Cluster
      tags:
      - cluster
  /api/v1/cluster/export:
    post:
      operationId: api.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAPIExportInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAPIExportOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Export Cluster
      tags:
      - roles/api
  /api/v1/cluster/import:
    post:
      operationId: api.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAPIImportInput'
      responses:
        "204":
          description: No Content
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Import Cluster
      tags:
      - roles/api
  /api/v1/cluster/instance:
    get:
      operationId: cluster.get_instance_info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceAPIInstanceInfo'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Instance
      tags:
      - cluster/instances
  /api/v1/cluster/node/logs:
    get:
      operationId: api.get_log_messages
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAPILogMessages'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Log messages
      tags:
      - roles/api
  /api/v1/cluster/roles/restart:
    post:
      operationId: cluster.instance_role_restart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceAPIRoleRestartInput'
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Instance roles
      tags:
      - cluster/instances
  /api/v1/dhcp/scopes:
    delete:
      operationId: dhcp.delete_scopes
      parameters:
      - explode: true
        in: query
        name: scope
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DHCP Scopes
      tags:
      - roles/dhcp
    get:
      operationId: dhcp.get_scopes
      parameters:
      - description: Optionally get DHCP Scope by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          description: Optionally get DHCP Scope by name
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpAPIScopesGetOutput'
          description: OK
      summary: DHCP Scopes
      tags:
      - roles/dhcp
    post:
      operationId: dhcp.put_scopes
      parameters:
      - explode: true
        in: query
        name: scope
        required: true
        schema:
          maxLength: 255
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpAPIScopesPutInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DHCP Scopes
      tags:
      - roles/dhcp
  /api/v1/dhcp/scopes/leases:
    delete:
      operationId: dhcp.delete_leases
      parameters:
      - explode: true
        in: query
        name: identifier
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DHCP Leases
      tags:
      - roles/dhcp
    get:
      operationId: dhcp.get_leases
      parameters:
      - explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      - description: Optional identifier of a lease to get
        explode: true
        in: query
        name: identifier
        required: false
        schema:
          description: Optional identifier of a lease to get
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpAPILeasesGetOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DHCP Leases
      tags:
      - roles/dhcp
    post:
      operationId: dhcp.put_leases
      parameters:
      - explode: true
        in: query
        name: identifier
        required: true
        schema:
          maxLength: 255
          type: string
        style: form
      - explode: true
        in: query
        name: scope
        required: true
        schema:
          maxLength: 255
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpAPILeasesPutInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DHCP Leases
      tags:
      - roles/dhcp
  /api/v1/dhcp/scopes/leases/wol:
    post:
      operationId: dhcp.wol_leases
      parameters:
      - explode: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: scope
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DHCP Leases
      tags:
      - roles/dhcp
  /api/v1/discovery/devices:
    get:
      operationId: discovery.get_devices
      parameters:
      - description: Optionally get device by identifier
        explode: true
        in: query
        name: identifier
        required: false
        schema:
          description: Optionally get device by identifier
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryAPIDevicesGetOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Discovery devices
      tags:
      - roles/discovery
  /api/v1/discovery/devices/apply:
    post:
      operationId: discovery.apply_device
      parameters:
      - explode: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryAPIDevicesApplyInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Apply Discovered devices
      tags:
      - roles/discovery
  /api/v1/discovery/devices/delete:
    delete:
      operationId: discovery.delete_devices
      parameters:
      - explode: true
        in: query
        name: identifier
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Discovery devices
      tags:
      - roles/discovery
  /api/v1/discovery/subnets:
    delete:
      operationId: discovery.delete_subnets
      parameters:
      - explode: true
        in: query
        name: identifier
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Discovery Subnets
      tags:
      - roles/discovery
    get:
      operationId: discovery.get_subnets
      parameters:
      - description: Optionally get Subnet by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          description: Optionally get Subnet by name
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryAPISubnetsGetOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Discovery subnets
      tags:
      - roles/discovery
    post:
      operationId: discovery.put_subnets
      parameters:
      - explode: true
        in: query
        name: identifier
        required: true
        schema:
          maxLength: 255
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryAPISubnetsPutInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Discovery Subnets
      tags:
      - roles/discovery
  /api/v1/discovery/subnets/start:
    post:
      operationId: discovery.subnet_start
      parameters:
      - explode: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Discovery Subnets
      tags:
      - roles/discovery
  /api/v1/dns/zones:
    delete:
      operationId: dns.delete_zones
      parameters:
      - explode: true
        in: query
        name: zone
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DNS Zones
      tags:
      - roles/dns
    get:
      operationId: dns.get_zones
      parameters:
      - description: Optionally get DNS Zone by name
        explode: true
        in: query
        name: name
        required: false
        schema:
          description: Optionally get DNS Zone by name
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsAPIZonesGetOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DNS Zones
      tags:
      - roles/dns
    post:
      operationId: dns.put_zones
      parameters:
      - explode: true
        in: query
        name: zone
        required: true
        schema:
          maxLength: 255
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsAPIZonesPutInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DNS Zones
      tags:
      - roles/dns
  /api/v1/dns/zones/records:
    delete:
      operationId: dns.delete_records
      parameters:
      - explode: true
        in: query
        name: zone
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: hostname
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: uid
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DNS Records
      tags:
      - roles/dns
    get:
      operationId: dns.get_records
      parameters:
      - explode: true
        in: query
        name: zone
        required: false
        schema:
          type: string
        style: form
      - description: Optionally get DNS Records for hostname
        explode: true
        in: query
        name: hostname
        required: false
        schema:
          description: Optionally get DNS Records for hostname
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsAPIRecordsGetOutput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DNS Records
      tags:
      - roles/dns
    post:
      operationId: dns.put_records
      parameters:
      - explode: true
        in: query
        name: zone
        required: true
        schema:
          maxLength: 255
          type: string
        style: form
      - explode: true
        in: query
        name: hostname
        required: true
        schema:
          maxLength: 255
          type: string
        style: form
      - explode: true
        in: query
        name: uid
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsAPIRecordsPutInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DNS Records
      tags:
      - roles/dns
  /api/v1/etcd/join:
    post:
      operationId: etcd.join_member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAPIMemberJoinInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAPIMemberJoinOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Etcd join
      tags:
      - roles/etcd
  /api/v1/etcd/members:
    get:
      operationId: api.get_members
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAPIMembersOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Etcd members
      tags:
      - roles/api
  /api/v1/roles/api:
    get:
      operationId: api.get_role_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAPIRoleConfigOutput'
          description: OK
      summary: API role config
      tags:
      - roles/api
    post:
      operationId: api.put_role_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAPIRoleConfigInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: API role config
      tags:
      - roles/api
  /api/v1/roles/backup:
    get:
      operationId: backup.get_role_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupAPIRoleConfigOutput'
          description: OK
      summary: Backup role config
      tags:
      - roles/backup
    post:
      operationId: backup.put_role_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackupAPIRoleConfigInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Backup role config
      tags:
      - roles/backup
  /api/v1/roles/dhcp:
    get:
      operationId: dhcp.get_role_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpAPIRoleConfigOutput'
          description: OK
      summary: DHCP role config
      tags:
      - roles/dhcp
    post:
      operationId: dhcp.put_role_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpAPIRoleConfigInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DHCP role config
      tags:
      - roles/dhcp
  /api/v1/roles/discovery:
    get:
      operationId: discovery.get_role_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryAPIRoleConfigOutput'
          description: OK
      summary: Discovery role config
      tags:
      - roles/discovery
    post:
      operationId: discovery.put_role_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryAPIRoleConfigInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Discovery role config
      tags:
      - roles/discovery
  /api/v1/roles/dns:
    get:
      operationId: dns.get_role_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsAPIRoleConfigOutput'
          description: OK
      summary: DNS role config
      tags:
      - roles/dns
    post:
      operationId: dns.put_role_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsAPIRoleConfigInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: DNS role config
      tags:
      - roles/dns
  /api/v1/roles/monitoring:
    get:
      operationId: monitoring.get_role_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoringAPIRoleConfigOutput'
          description: OK
      summary: Monitoring role config
      tags:
      - roles/monitoring
    post:
      operationId: monitoring.put_role_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoringAPIRoleConfigInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Monitoring role config
      tags:
      - roles/monitoring
  /api/v1/roles/tftp:
    get:
      operationId: tftp.get_role_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TftpAPIRoleConfigOutput'
          description: OK
      summary: TFTP role config
      tags:
      - roles/tftp
    post:
      operationId: tftp.put_role_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TftpAPIRoleConfigInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: TFTP role config
      tags:
      - roles/tftp
  /api/v1/roles/tsdb:
    get:
      operationId: tsdb.get_role_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TsdbAPIRoleConfigOutput'
          description: OK
      summary: TSDB role config
      tags:
      - roles/tsdb
    post:
      operationId: tsdb.put_role_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TsdbAPIRoleConfigInput'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: TSDB role config
      tags:
      - roles/tsdb
  /api/v1/tftp/files:
    delete:
      operationId: tftp.delete_files
      parameters:
      - explode: true
        in: query
        name: host
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: TFTP Files
      tags:
      - roles/tftp
    get:
      operationId: tftp.get_files
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TftpAPIFilesGetOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: TFTP Files
      tags:
      - roles/tftp
    post:
      operationId: tftp.put_files
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TftpAPIFilesPutInput'
      responses:
        "204":
          description: No Content
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: TFTP Files
      tags:
      - roles/tftp
  /api/v1/tftp/files/download:
    get:
      operationId: tftp.download_files
      parameters:
      - explode: true
        in: query
        name: host
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TftpAPIFilesDownloadOutput'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: TFTP Files
      tags:
      - roles/tftp
  /api/v1/tools/ping:
    post:
      operationId: tools.ping
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAPIToolPingInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAPIToolPingOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Ping tool
      tags:
      - roles/api
  /api/v1/tools/portmap:
    post:
      operationId: tools.portmap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAPIToolPortmapInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAPIToolPortmapOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Portmap tool
      tags:
      - roles/api
  /api/v1/tools/traceroute:
    post:
      operationId: tools.traceroute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAPIToolTracerouteInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAPIToolTracerouteOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Traceroute tool
      tags:
      - roles/api
  /api/v1/tsdb/metrics:
    get:
      operationId: tsdb.get_metrics
      parameters:
      - explode: true
        in: query
        name: role
        required: true
        schema:
          $ref: '#/components/schemas/TypesAPIMetricsRole'
        style: form
      - explode: true
        in: query
        name: category
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: node
        required: false
        schema:
          type: string
        style: form
      - description: Optionally set a start time for which to return datapoints after
        explode: true
        in: query
        name: since
        required: false
        schema:
          description: Optionally set a start time for which to return datapoints
            after
          format: date-time
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesAPIMetricsGetOutput'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestErrResponse'
          description: Internal Server Error
      summary: Retrieve Metrics
      tags:
      - roles/tsdb
components:
  schemas:
    ApiAPIExportInput:
      example:
        safe: true
      properties:
        safe:
          type: boolean
      type: object
    ApiAPIExportOutput:
      example:
        entries:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        entries:
          items:
            $ref: '#/components/schemas/ApiAPITransportEntry'
          nullable: true
          type: array
      type: object
    ApiAPIImportInput:
      example:
        entries:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        entries:
          items:
            $ref: '#/components/schemas/ApiAPITransportEntry'
          nullable: true
          type: array
      type: object
    ApiAPILogMessage:
      example:
        node: node
        level: level
        logger: logger
        time: 2000-01-23T04:56:07.000+00:00
        message: message
      properties:
        level:
          type: string
        logger:
          type: string
        message:
          type: string
        node:
          type: string
        time:
          format: date-time
          type: string
      type: object
    ApiAPILogMessages:
      example:
        messages:
        - node: node
          level: level
          logger: logger
          time: 2000-01-23T04:56:07.000+00:00
          message: message
        - node: node
          level: level
          logger: logger
          time: 2000-01-23T04:56:07.000+00:00
          message: message
      properties:
        messages:
          items:
            $ref: '#/components/schemas/ApiAPILogMessage'
          nullable: true
          type: array
      type: object
    ApiAPIMember:
      example:
        name: name
        id: 0
      properties:
        id:
          minimum: 0
          type: integer
        name:
          type: string
      type: object
    ApiAPIMemberJoinInput:
      example:
        identifier: identifier
        peer: peer
        roles: roles
      properties:
        identifier:
          type: string
        peer:
          maxLength: 255
          type: string
        roles:
          type: string
      type: object
    ApiAPIMemberJoinOutput:
      example:
        etcdInitialCluster: etcdInitialCluster
      properties:
        etcdInitialCluster:
          type: string
      type: object
    ApiAPIMembersOutput:
      example:
        members:
        - name: name
          id: 0
        - name: name
          id: 0
      properties:
        members:
          items:
            $ref: '#/components/schemas/ApiAPIMember'
          nullable: true
          type: array
      type: object
    ApiAPIRoleConfigInput:
      example:
        config:
          port: 0
          cookieSecret: cookieSecret
          listenOverride: listenOverride
          sessionDuration: sessionDuration
          oidc:
            clientID: clientID
            redirectURL: redirectURL
            clientSecret: clientSecret
            scopes:
            - scopes
            - scopes
            issuer: issuer
      properties:
        config:
          $ref: '#/components/schemas/ApiRoleConfig'
      required:
      - config
      type: object
    ApiAPIRoleConfigOutput:
      example:
        config:
          port: 0
          cookieSecret: cookieSecret
          listenOverride: listenOverride
          sessionDuration: sessionDuration
          oidc:
            clientID: clientID
            redirectURL: redirectURL
            clientSecret: clientSecret
            scopes:
            - scopes
            - scopes
            issuer: issuer
      properties:
        config:
          $ref: '#/components/schemas/ApiRoleConfig'
      required:
      - config
      type: object
    ApiAPIToolPingInput:
      example:
        host: host
      properties:
        host:
          type: string
      type: object
    ApiAPIToolPingOutput:
      example:
        maxRtt: 6
        avgRtt: 0
        packetLoss: 5.962133916683182
        packetsRecvDuplicates: 2
        stdDevRtt: 9
        packetsRecv: 5
        packetsSent: 7
        minRtt: 1
      properties:
        avgRtt:
          type: integer
        maxRtt:
          type: integer
        minRtt:
          type: integer
        packetLoss:
          type: number
        packetsRecv:
          type: integer
        packetsRecvDuplicates:
          type: integer
        packetsSent:
          type: integer
        stdDevRtt:
          type: integer
      type: object
    ApiAPIToolPortmapInput:
      example:
        host: host
      properties:
        host:
          type: string
      type: object
    ApiAPIToolPortmapOutput:
      example:
        ports:
        - reason: reason
          protocol: protocol
          port: 0
          name: name
        - reason: reason
          protocol: protocol
          port: 0
          name: name
      properties:
        ports:
          items:
            $ref: '#/components/schemas/ApiAPIToolPortmapOutputPort'
          nullable: true
          type: array
      type: object
    ApiAPIToolPortmapOutputPort:
      example:
        reason: reason
        protocol: protocol
        port: 0
        name: name
      properties:
        name:
          type: string
        port:
          minimum: 0
          type: integer
        protocol:
          type: string
        reason:
          type: string
      type: object
    ApiAPIToolTracerouteInput:
      example:
        host: host
      properties:
        host:
          type: string
      type: object
    ApiAPIToolTracerouteOutput:
      example:
        hops:
        - address: address
          success: true
          elapsedTime: 0
        - address: address
          success: true
          elapsedTime: 0
      properties:
        hops:
          items:
            $ref: '#/components/schemas/ApiAPIToolTracerouteOutputHop'
          nullable: true
          type: array
      type: object
    ApiAPIToolTracerouteOutputHop:
      example:
        address: address
        success: true
        elapsedTime: 0
      properties:
        address:
          type: string
        elapsedTime:
          type: integer
        success:
          type: boolean
      type: object
    ApiAPITransportEntry:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    ApiRoleConfig:
      example:
        port: 0
        cookieSecret: cookieSecret
        listenOverride: listenOverride
        sessionDuration: sessionDuration
        oidc:
          clientID: clientID
          redirectURL: redirectURL
          clientSecret: clientSecret
          scopes:
          - scopes
          - scopes
          issuer: issuer
      properties:
        cookieSecret:
          type: string
        listenOverride:
          type: string
        oidc:
          $ref: '#/components/schemas/TypesOIDCConfig'
        port:
          type: integer
        sessionDuration:
          type: string
      type: object
    AuthAPIConfigOutput:
      example:
        bool: true
        oidc: true
      properties:
        bool:
          type: boolean
        oidc:
          type: boolean
      type: object
    AuthAPILoginInput:
      example:
        password: password
        username: username
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    AuthAPILoginOutput:
      example:
        successful: true
      properties:
        successful:
          type: boolean
      type: object
    AuthAPIMeOutput:
      example:
        authenticated: true
        username: username
      properties:
        authenticated:
          type: boolean
        username:
          type: string
      required:
      - authenticated
      - username
      type: object
    AuthAPIToken:
      example:
        key: key
        username: username
      properties:
        key:
          type: string
        username:
          type: string
      required:
      - key
      - username
      type: object
    AuthAPITokensGetOutput:
      example:
        tokens:
        - key: key
          username: username
        - key: key
          username: username
      properties:
        tokens:
          items:
            $ref: '#/components/schemas/AuthAPIToken'
          nullable: true
          type: array
      required:
      - tokens
      type: object
    AuthAPITokensPutOutput:
      example:
        key: key
      properties:
        key:
          type: string
      required:
      - key
      type: object
    AuthAPIUser:
      example:
        permissions:
        - path: path
          methods:
          - methods
          - methods
        - path: path
          methods:
          - methods
          - methods
        username: username
      properties:
        permissions:
          items:
            $ref: '#/components/schemas/AuthPermission'
          nullable: true
          type: array
        username:
          type: string
      required:
      - permissions
      - username
      type: object
    AuthAPIUsersGetOutput:
      example:
        users:
        - permissions:
          - path: path
            methods:
            - methods
            - methods
          - path: path
            methods:
            - methods
            - methods
          username: username
        - permissions:
          - path: path
            methods:
            - methods
            - methods
          - path: path
            methods:
            - methods
            - methods
          username: username
      properties:
        users:
          items:
            $ref: '#/components/schemas/AuthAPIUser'
          nullable: true
          type: array
      required:
      - users
      type: object
    AuthAPIUsersPutInput:
      example:
        password: password
        permissions:
        - path: path
          methods:
          - methods
          - methods
        - path: path
          methods:
          - methods
          - methods
      properties:
        password:
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/AuthPermission'
          nullable: true
          type: array
      required:
      - password
      - permissions
      type: object
    AuthPermission:
      example:
        path: path
        methods:
        - methods
        - methods
      properties:
        methods:
          items:
            type: string
          nullable: true
          type: array
        path:
          type: string
      type: object
    BackupAPIBackupStatus:
      example:
        duration: 0
        node: node
        filename: filename
        size: 6
        time: 2000-01-23T04:56:07.000+00:00
        error: error
        status: status
      properties:
        duration:
          type: integer
        error:
          type: string
        filename:
          type: string
        node:
          type: string
        size:
          type: integer
        status:
          type: string
        time:
          format: date-time
          type: string
      required:
      - duration
      - error
      - filename
      - size
      - status
      - time
      type: object
    BackupAPIBackupStatusOutput:
      example:
        status:
        - duration: 0
          node: node
          filename: filename
          size: 6
          time: 2000-01-23T04:56:07.000+00:00
          error: error
          status: status
        - duration: 0
          node: node
          filename: filename
          size: 6
          time: 2000-01-23T04:56:07.000+00:00
          error: error
          status: status
      properties:
        status:
          items:
            $ref: '#/components/schemas/BackupAPIBackupStatus'
          nullable: true
          type: array
      required:
      - status
      type: object
    BackupAPIRoleConfigInput:
      example:
        config:
          bucket: bucket
          cronExpr: cronExpr
          path: path
          endpoint: endpoint
          secretKey: secretKey
          accessKey: accessKey
      properties:
        config:
          $ref: '#/components/schemas/BackupRoleConfig'
      required:
      - config
      type: object
    BackupAPIRoleConfigOutput:
      example:
        config:
          bucket: bucket
          cronExpr: cronExpr
          path: path
          endpoint: endpoint
          secretKey: secretKey
          accessKey: accessKey
      properties:
        config:
          $ref: '#/components/schemas/BackupRoleConfig'
      required:
      - config
      type: object
    BackupBackupStatus:
      example:
        duration: 0
        filename: filename
        size: 6
        time: 2000-01-23T04:56:07.000+00:00
        error: error
        status: status
      properties:
        duration:
          type: integer
        error:
          type: string
        filename:
          type: string
        size:
          type: integer
        status:
          type: string
        time:
          format: date-time
          type: string
      required:
      - duration
      - error
      - filename
      - size
      - status
      - time
      type: object
    BackupRoleConfig:
      example:
        bucket: bucket
        cronExpr: cronExpr
        path: path
        endpoint: endpoint
        secretKey: secretKey
        accessKey: accessKey
      properties:
        accessKey:
          type: string
        bucket:
          type: string
        cronExpr:
          type: string
        endpoint:
          type: string
        path:
          type: string
        secretKey:
          type: string
      type: object
    DhcpAPILease:
      example:
        identifier: identifier
        hostname: hostname
        address: address
        dnsZone: dnsZone
        scopeKey: scopeKey
        expiry: 0
        addressLeaseTime: addressLeaseTime
        info:
          vendor: vendor
      properties:
        address:
          type: string
        addressLeaseTime:
          type: string
        dnsZone:
          type: string
        expiry:
          type: integer
        hostname:
          type: string
        identifier:
          type: string
        info:
          $ref: '#/components/schemas/DhcpAPILeaseInfo'
        scopeKey:
          type: string
      required:
      - address
      - addressLeaseTime
      - hostname
      - identifier
      - scopeKey
      type: object
    DhcpAPILeaseInfo:
      example:
        vendor: vendor
      properties:
        vendor:
          type: string
      type: object
    DhcpAPILeasesGetOutput:
      example:
        leases:
        - identifier: identifier
          hostname: hostname
          address: address
          dnsZone: dnsZone
          scopeKey: scopeKey
          expiry: 0
          addressLeaseTime: addressLeaseTime
          info:
            vendor: vendor
        - identifier: identifier
          hostname: hostname
          address: address
          dnsZone: dnsZone
          scopeKey: scopeKey
          expiry: 0
          addressLeaseTime: addressLeaseTime
          info:
            vendor: vendor
      properties:
        leases:
          items:
            $ref: '#/components/schemas/DhcpAPILease'
          nullable: true
          type: array
      required:
      - leases
      type: object
    DhcpAPILeasesPutInput:
      example:
        hostname: hostname
        address: address
        dnsZone: dnsZone
        expiry: 0
        addressLeaseTime: addressLeaseTime
      properties:
        address:
          maxLength: 40
          type: string
        addressLeaseTime:
          maxLength: 40
          type: string
        dnsZone:
          maxLength: 255
          type: string
        expiry:
          type: integer
        hostname:
          maxLength: 255
          type: string
      required:
      - address
      - addressLeaseTime
      - hostname
      type: object
    DhcpAPIRoleConfigInput:
      example:
        config:
          leaseNegotiateTimeout: 0
          port: 6
      properties:
        config:
          $ref: '#/components/schemas/DhcpRoleConfig'
      required:
      - config
      type: object
    DhcpAPIRoleConfigOutput:
      example:
        config:
          leaseNegotiateTimeout: 0
          port: 6
      properties:
        config:
          $ref: '#/components/schemas/DhcpRoleConfig'
      required:
      - config
      type: object
    DhcpAPIScope:
      example:
        subnetCidr: subnetCidr
        default: true
        ipam:
          key: ipam
        hook: hook
        scope: scope
        dns:
          search:
          - search
          - search
          zone: zone
          addZoneInHostname: true
        options:
        - value64:
          - value64
          - value64
          valueHex:
          - valueHex
          - valueHex
          tag: 0
          tagName: tagName
          value: value
        - value64:
          - value64
          - value64
          valueHex:
          - valueHex
          - valueHex
          tag: 0
          tagName: tagName
          value: value
        ttl: 5
        statistics:
          usable: 0
          used: 0
      properties:
        default:
          type: boolean
        dns:
          $ref: '#/components/schemas/DhcpScopeDNS'
        hook:
          type: string
        ipam:
          additionalProperties:
            type: string
          nullable: true
          type: object
        options:
          items:
            $ref: '#/components/schemas/TypesDHCPOption'
          nullable: true
          type: array
        scope:
          type: string
        statistics:
          $ref: '#/components/schemas/DhcpAPIScopeStatistics'
        subnetCidr:
          type: string
        ttl:
          type: integer
      required:
      - default
      - hook
      - ipam
      - options
      - scope
      - statistics
      - subnetCidr
      - ttl
      type: object
    DhcpAPIScopeStatistics:
      example:
        usable: 0
        used: 0
      properties:
        usable:
          minimum: 0
          type: integer
        used:
          minimum: 0
          type: integer
      required:
      - usable
      - used
      type: object
    DhcpAPIScopesGetOutput:
      example:
        scopes:
        - subnetCidr: subnetCidr
          default: true
          ipam:
            key: ipam
          hook: hook
          scope: scope
          dns:
            search:
            - search
            - search
            zone: zone
            addZoneInHostname: true
          options:
          - value64:
            - value64
            - value64
            valueHex:
            - valueHex
            - valueHex
            tag: 0
            tagName: tagName
            value: value
          - value64:
            - value64
            - value64
            valueHex:
            - valueHex
            - valueHex
            tag: 0
            tagName: tagName
            value: value
          ttl: 5
          statistics:
            usable: 0
            used: 0
        - subnetCidr: subnetCidr
          default: true
          ipam:
            key: ipam
          hook: hook
          scope: scope
          dns:
            search:
            - search
            - search
            zone: zone
            addZoneInHostname: true
          options:
          - value64:
            - value64
            - value64
            valueHex:
            - valueHex
            - valueHex
            tag: 0
            tagName: tagName
            value: value
          - value64:
            - value64
            - value64
            valueHex:
            - valueHex
            - valueHex
            tag: 0
            tagName: tagName
            value: value
          ttl: 5
          statistics:
            usable: 0
            used: 0
        statistics:
          usable: 0
          used: 0
      properties:
        scopes:
          items:
            $ref: '#/components/schemas/DhcpAPIScope'
          nullable: true
          type: array
        statistics:
          $ref: '#/components/schemas/DhcpAPIScopeStatistics'
      required:
      - scopes
      - statistics
      type: object
    DhcpAPIScopesPutInput:
      example:
        subnetCidr: subnetCidr
        default: true
        ipam:
          key: ipam
        hook: hook
        dns:
          search:
          - search
          - search
          zone: zone
          addZoneInHostname: true
        options:
        - value64:
          - value64
          - value64
          valueHex:
          - valueHex
          - valueHex
          tag: 0
          tagName: tagName
          value: value
        - value64:
          - value64
          - value64
          valueHex:
          - valueHex
          - valueHex
          tag: 0
          tagName: tagName
          value: value
        ttl: 0
      properties:
        default:
          type: boolean
        dns:
          $ref: '#/components/schemas/DhcpScopeDNS'
        hook:
          type: string
        ipam:
          additionalProperties:
            type: string
          nullable: true
          type: object
        options:
          items:
            $ref: '#/components/schemas/TypesDHCPOption'
          nullable: true
          type: array
        subnetCidr:
          maxLength: 40
          type: string
        ttl:
          type: integer
      required:
      - default
      - hook
      - options
      - subnetCidr
      - ttl
      type: object
    DhcpRoleConfig:
      example:
        leaseNegotiateTimeout: 0
        port: 6
      properties:
        leaseNegotiateTimeout:
          type: integer
        port:
          type: integer
      type: object
    DhcpScopeDNS:
      example:
        search:
        - search
        - search
        zone: zone
        addZoneInHostname: true
      properties:
        addZoneInHostname:
          type: boolean
        search:
          items:
            type: string
          nullable: true
          type: array
        zone:
          type: string
      type: object
    DiscoveryAPIDevice:
      example:
        identifier: identifier
        hostname: hostname
        ip: ip
        mac: mac
      properties:
        hostname:
          type: string
        identifier:
          type: string
        ip:
          type: string
        mac:
          type: string
      required:
      - hostname
      - identifier
      - ip
      - mac
      type: object
    DiscoveryAPIDevicesApplyInput:
      example:
        dnsZone: dnsZone
        to: dhcp
        dhcpScope: dhcpScope
      properties:
        dhcpScope:
          type: string
        dnsZone:
          type: string
        to:
          enum:
          - dhcp
          - dns
          type: string
      required:
      - dhcpScope
      - dnsZone
      - to
      type: object
    DiscoveryAPIDevicesGetOutput:
      example:
        devices:
        - identifier: identifier
          hostname: hostname
          ip: ip
          mac: mac
        - identifier: identifier
          hostname: hostname
          ip: ip
          mac: mac
      properties:
        devices:
          items:
            $ref: '#/components/schemas/DiscoveryAPIDevice'
          nullable: true
          type: array
      type: object
    DiscoveryAPIRoleConfigInput:
      example:
        config:
          enabled: true
      properties:
        config:
          $ref: '#/components/schemas/DiscoveryRoleConfig'
      required:
      - config
      type: object
    DiscoveryAPIRoleConfigOutput:
      example:
        config:
          enabled: true
      properties:
        config:
          $ref: '#/components/schemas/DiscoveryRoleConfig'
      required:
      - config
      type: object
    DiscoveryAPISubnet:
      example:
        subnetCidr: subnetCidr
        name: name
        dnsResolver: dnsResolver
        discoveryTTL: 0
      properties:
        discoveryTTL:
          type: integer
        dnsResolver:
          type: string
        name:
          type: string
        subnetCidr:
          type: string
      required:
      - discoveryTTL
      - dnsResolver
      - name
      - subnetCidr
      type: object
    DiscoveryAPISubnetsGetOutput:
      example:
        subnets:
        - subnetCidr: subnetCidr
          name: name
          dnsResolver: dnsResolver
          discoveryTTL: 0
        - subnetCidr: subnetCidr
          name: name
          dnsResolver: dnsResolver
          discoveryTTL: 0
      properties:
        subnets:
          items:
            $ref: '#/components/schemas/DiscoveryAPISubnet'
          nullable: true
          type: array
      type: object
    DiscoveryAPISubnetsPutInput:
      example:
        subnetCidr: subnetCidr
        dnsResolver: dnsResolver
        discoveryTTL: 0
      properties:
        discoveryTTL:
          type: integer
        dnsResolver:
          maxLength: 255
          type: string
        subnetCidr:
          maxLength: 40
          type: string
      required:
      - discoveryTTL
      - dnsResolver
      - subnetCidr
      type: object
    DiscoveryRoleConfig:
      example:
        enabled: true
      properties:
        enabled:
          type: boolean
      type: object
    DnsAPIRecord:
      example:
        srvPort: 0
        uid: uid
        hostname: hostname
        mxPreference: 0
        data: data
        fqdn: fqdn
        srvPriority: 0
        srvWeight: 0
        type: type
      properties:
        data:
          type: string
        fqdn:
          type: string
        hostname:
          type: string
        mxPreference:
          minimum: 0
          type: integer
        srvPort:
          minimum: 0
          type: integer
        srvPriority:
          minimum: 0
          type: integer
        srvWeight:
          minimum: 0
          type: integer
        type:
          type: string
        uid:
          type: string
      required:
      - data
      - fqdn
      - hostname
      - type
      - uid
      type: object
    DnsAPIRecordsGetOutput:
      example:
        records:
        - srvPort: 0
          uid: uid
          hostname: hostname
          mxPreference: 0
          data: data
          fqdn: fqdn
          srvPriority: 0
          srvWeight: 0
          type: type
        - srvPort: 0
          uid: uid
          hostname: hostname
          mxPreference: 0
          data: data
          fqdn: fqdn
          srvPriority: 0
          srvWeight: 0
          type: type
      properties:
        records:
          items:
            $ref: '#/components/schemas/DnsAPIRecord'
          nullable: true
          type: array
      required:
      - records
      type: object
    DnsAPIRecordsPutInput:
      example:
        srvPort: 0
        mxPreference: 0
        data: data
        srvPriority: 0
        srvWeight: 0
        type: type
      properties:
        data:
          type: string
        mxPreference:
          minimum: 0
          type: integer
        srvPort:
          minimum: 0
          type: integer
        srvPriority:
          minimum: 0
          type: integer
        srvWeight:
          minimum: 0
          type: integer
        type:
          type: string
      required:
      - data
      - type
      type: object
    DnsAPIRoleConfigInput:
      example:
        config:
          port: 0
      properties:
        config:
          $ref: '#/components/schemas/DnsRoleConfig'
      required:
      - config
      type: object
    DnsAPIRoleConfigOutput:
      example:
        config:
          port: 0
      properties:
        config:
          $ref: '#/components/schemas/DnsRoleConfig'
      required:
      - config
      type: object
    DnsAPIZone:
      example:
        handlerConfigs:
        - key: ""
        - key: ""
        authoritative: true
        hook: hook
        recordCount: 6
        defaultTTL: 0
        name: name
      properties:
        authoritative:
          type: boolean
        defaultTTL:
          minimum: 0
          type: integer
        handlerConfigs:
          items:
            additionalProperties: {}
            type: object
          nullable: true
          type: array
        hook:
          type: string
        name:
          type: string
        recordCount:
          type: integer
      required:
      - authoritative
      - defaultTTL
      - handlerConfigs
      - hook
      - name
      - recordCount
      type: object
    DnsAPIZonesGetOutput:
      example:
        zones:
        - handlerConfigs:
          - key: ""
          - key: ""
          authoritative: true
          hook: hook
          recordCount: 6
          defaultTTL: 0
          name: name
        - handlerConfigs:
          - key: ""
          - key: ""
          authoritative: true
          hook: hook
          recordCount: 6
          defaultTTL: 0
          name: name
      properties:
        zones:
          items:
            $ref: '#/components/schemas/DnsAPIZone'
          nullable: true
          type: array
      required:
      - zones
      type: object
    DnsAPIZonesPutInput:
      example:
        handlerConfigs:
        - key: ""
        - key: ""
        authoritative: true
        hook: hook
        defaultTTL: 0
      properties:
        authoritative:
          type: boolean
        defaultTTL:
          minimum: 0
          type: integer
        handlerConfigs:
          items:
            additionalProperties: {}
            type: object
          nullable: true
          type: array
        hook:
          type: string
      required:
      - authoritative
      - defaultTTL
      - handlerConfigs
      - hook
      type: object
    DnsRoleConfig:
      example:
        port: 0
      properties:
        port:
          type: integer
      type: object
    ExtconfigExtConfigDirs:
      example:
        backupDir: backupDir
        etcdDir: etcdDir
        certDir: certDir
        tftpLocalDir: tftpLocalDir
      properties:
        backupDir:
          type: string
        certDir:
          type: string
        etcdDir:
          type: string
        tftpLocalDir:
          type: string
      type: object
    InstanceAPIClusterInfoOutput:
      example:
        clusterVersionShort: clusterVersionShort
        instances:
        - identifier: identifier
          ip: ip
          roles:
          - roles
          - roles
          version: version
        - identifier: identifier
          ip: ip
          roles:
          - roles
          - roles
          version: version
        clusterVersion: clusterVersion
      properties:
        clusterVersion:
          type: string
        clusterVersionShort:
          type: string
        instances:
          items:
            $ref: '#/components/schemas/InstanceInstanceInfo'
          nullable: true
          type: array
      required:
      - clusterVersion
      - clusterVersionShort
      - instances
      type: object
    InstanceAPIInstanceInfo:
      example:
        buildHash: buildHash
        dirs:
          backupDir: backupDir
          etcdDir: etcdDir
          certDir: certDir
          tftpLocalDir: tftpLocalDir
        instanceIdentifier: instanceIdentifier
        version: version
        instanceIP: instanceIP
      properties:
        buildHash:
          type: string
        dirs:
          $ref: '#/components/schemas/ExtconfigExtConfigDirs'
        instanceIP:
          type: string
        instanceIdentifier:
          type: string
        version:
          type: string
      required:
      - buildHash
      - dirs
      - instanceIP
      - instanceIdentifier
      - version
      type: object
    InstanceAPIRoleRestartInput:
      example:
        roleId: roleId
      properties:
        roleId:
          type: string
      type: object
    InstanceInstanceInfo:
      example:
        identifier: identifier
        ip: ip
        roles:
        - roles
        - roles
        version: version
      properties:
        identifier:
          type: string
        ip:
          type: string
        roles:
          items:
            type: string
          nullable: true
          type: array
        version:
          type: string
      required:
      - identifier
      - ip
      - roles
      - version
      type: object
    MonitoringAPIRoleConfigInput:
      example:
        config:
          port: 0
      properties:
        config:
          $ref: '#/components/schemas/MonitoringRoleConfig'
      required:
      - config
      type: object
    MonitoringAPIRoleConfigOutput:
      example:
        config:
          port: 0
      properties:
        config:
          $ref: '#/components/schemas/MonitoringRoleConfig'
      required:
      - config
      type: object
    MonitoringRoleConfig:
      example:
        port: 0
      properties:
        port:
          type: integer
      type: object
    RestErrResponse:
      properties:
        code:
          description: Application-specific error code.
          type: integer
        context:
          additionalProperties: {}
          description: Application context.
          type: object
        error:
          description: Error message.
          type: string
        status:
          description: Status text.
          type: string
      type: object
    TftpAPIFile:
      example:
        host: host
        name: name
        sizeBytes: 0
      properties:
        host:
          type: string
        name:
          type: string
        sizeBytes:
          type: integer
      required:
      - host
      - name
      - sizeBytes
      type: object
    TftpAPIFilesDownloadOutput:
      example:
        data: data
      properties:
        data:
          format: base64
          type: string
      required:
      - data
      type: object
    TftpAPIFilesGetOutput:
      example:
        files:
        - host: host
          name: name
          sizeBytes: 0
        - host: host
          name: name
          sizeBytes: 0
      properties:
        files:
          items:
            $ref: '#/components/schemas/TftpAPIFile'
          nullable: true
          type: array
      required:
      - files
      type: object
    TftpAPIFilesPutInput:
      example:
        data: data
        host: host
        name: name
      properties:
        data:
          format: base64
          type: string
        host:
          type: string
        name:
          type: string
      required:
      - data
      - host
      - name
      type: object
    TftpAPIRoleConfigInput:
      example:
        config:
          port: 0
          enableLocal: true
      properties:
        config:
          $ref: '#/components/schemas/TftpRoleConfig'
      required:
      - config
      type: object
    TftpAPIRoleConfigOutput:
      example:
        config:
          port: 0
          enableLocal: true
      properties:
        config:
          $ref: '#/components/schemas/TftpRoleConfig'
      required:
      - config
      type: object
    TftpRoleConfig:
      example:
        port: 0
        enableLocal: true
      properties:
        enableLocal:
          type: boolean
        port:
          type: integer
      type: object
    TsdbAPIRoleConfigInput:
      example:
        config:
          scrape: 6
          expire: 0
          enabled: true
      properties:
        config:
          $ref: '#/components/schemas/TsdbRoleConfig'
      required:
      - config
      type: object
    TsdbAPIRoleConfigOutput:
      example:
        config:
          scrape: 6
          expire: 0
          enabled: true
      properties:
        config:
          $ref: '#/components/schemas/TsdbRoleConfig'
      required:
      - config
      type: object
    TsdbRoleConfig:
      example:
        scrape: 6
        expire: 0
        enabled: true
      properties:
        enabled:
          type: boolean
        expire:
          type: integer
        scrape:
          type: integer
      type: object
    TypesAPIMetricsGetOutput:
      example:
        records:
        - node: node
          keys:
          - keys
          - keys
          time: 2000-01-23T04:56:07.000+00:00
          value: 0
        - node: node
          keys:
          - keys
          - keys
          time: 2000-01-23T04:56:07.000+00:00
          value: 0
      properties:
        records:
          items:
            $ref: '#/components/schemas/TypesAPIMetricsRecord'
          nullable: true
          type: array
      required:
      - records
      type: object
    TypesAPIMetricsRecord:
      example:
        node: node
        keys:
        - keys
        - keys
        time: 2000-01-23T04:56:07.000+00:00
        value: 0
      properties:
        keys:
          items:
            type: string
          nullable: true
          type: array
        node:
          type: string
        time:
          format: date-time
          type: string
        value:
          type: integer
      required:
      - keys
      - node
      - time
      - value
      type: object
    TypesAPIMetricsRole:
      enum:
      - system
      - dns
      type: string
    TypesDHCPOption:
      example:
        value64:
        - value64
        - value64
        valueHex:
        - valueHex
        - valueHex
        tag: 0
        tagName: tagName
        value: value
      properties:
        tag:
          minimum: 0
          nullable: true
          type: integer
        tagName:
          type: string
        value:
          nullable: true
          type: string
        value64:
          items:
            type: string
          nullable: true
          type: array
        valueHex:
          items:
            type: string
          nullable: true
          type: array
      type: object
    TypesOIDCConfig:
      example:
        clientID: clientID
        redirectURL: redirectURL
        clientSecret: clientSecret
        scopes:
        - scopes
        - scopes
        issuer: issuer
      properties:
        clientID:
          type: string
        clientSecret:
          type: string
        issuer:
          type: string
        redirectURL:
          type: string
        scopes:
          items:
            type: string
          nullable: true
          type: array
      type: object
